using Sharpmake;
using GameCore;

//-------------------------------------------------------------------------------------------------
// Pull in GameCore's Sharpmake files as a separate project
//-------------------------------------------------------------------------------------------------
[module: Sharpmake.Package(@"..\GameCore\Sharpmake\Include.cs")]

//-------------------------------------------------------------------------------------------------
// Set the name for the project generated by this Sharpmake file
//-------------------------------------------------------------------------------------------------
[module: Sharpmake.DebugProjectName("Template")]

namespace Template
{
	//-------------------------------------------------------------------------------------------------
	// The Client 'is' the game. It's should contain everything to run the game for an End User
	//-------------------------------------------------------------------------------------------------
	[Generate]
	class TemplateClientProject : BaseCPPLib
	{
		public TemplateClientProject()
		{
			SharpmakeToGlobalRoot = SharpmakeToRoot = @"\..";

			Name = "TemplateClient";
			ShortName = "TMP";
			SourceFolder = "Template";
			SourceSubFolder = "Client";
		}

		public override void ConfigureAll(Configuration conf, Target target)
		{
			base.ConfigureAll(conf, target);

			conf.Options.Add(Options.Vc.Linker.SubSystem.Application);

			conf.AddPublicDependency<GameBaseProject>(target);
			
			// Optional
			conf.AddPublicDependency<GameExampleClient>(target);

			conf.SolutionFolder = "Template";
		}
	}

	//-------------------------------------------------------------------------------------------------
	// The Tools project is everything used to make the game. Editors, file handling, and anything not
	// required to ultimately run the game can go in here.
	//-------------------------------------------------------------------------------------------------
	[Generate]
	class TemplateToolsProject : BaseCPPLib
	{
		public TemplateToolsProject()
		{
			SharpmakeToGlobalRoot = SharpmakeToRoot = @"\..";

			Name = "TemplateTools";
			ShortName = "TMP";
			SourceFolder = "Template";
			SourceSubFolder = "Tools";
		}

		public override void ConfigureAll(Configuration conf, Target target)
		{
			base.ConfigureAll(conf, target);

			conf.AddPublicDependency<TemplateClientProject>(target);
			conf.AddPublicDependency<GameToolsProject>(target);

			// Optional
			conf.AddPublicDependency<GameExampleTools>(target);

			conf.SolutionFolder = "Template";
		}
	}

	//-------------------------------------------------------------------------------------------------
	// The exe project makes the final executable. It will bring in the Tools project on editable
	// configurations. It should only require the minimal amount to build the an exe.
	//-------------------------------------------------------------------------------------------------
	[Generate]
	class TemplateExeProject : BaseCPPExe
	{
		public TemplateExeProject()
		{
			SharpmakeToGlobalRoot = SharpmakeToRoot = @"\..";

			Name = "TemplateExe";
			SourceFolder = "Template";
			SourceSubFolder = "Exe";
		}

		public override void ConfigureAll(Configuration conf, Target target)
		{
			base.ConfigureAll(conf, target);

			conf.Options.Add(Options.Vc.Linker.SubSystem.Application);

			if (target.Platform.IsPC() && target.Optimization != Optimization.Retail)
			{
				conf.AddPublicDependency<TemplateToolsProject>(target);
			}
			else
			{
				conf.AddPublicDependency<TemplateClientProject>(target);
			}

			conf.SolutionFolder = "Template";
		}

		public override void ConfigureWindows(Configuration conf, Target target)
		{
			base.ConfigureWindows(conf, target);

			// Todo: not need this duplicate reference
			conf.ReferencesByNuGetPackage.Add("WinPixEventRuntime", "1.0.181206001");
		}
	}

	//-------------------------------------------------------------------------------------------------
	// Unfortunately this need to be separate so we don't pick up tools dependency at all or bad things happen.
	//-------------------------------------------------------------------------------------------------
	[Generate]
	class TemplateExeProjectAndroid : BaseCPPExe
	{
		public TemplateExeProjectAndroid()
		{
			SharpmakeToGlobalRoot = SharpmakeToRoot = @"\..";

			Name = "TemplateExeAndroid";
			SourceFolder = "Template";
			SourceSubFolder = "Exe";
		}

		public override void ConfigureAll(Configuration conf, Target target)
		{
			base.ConfigureAll(conf, target);

			conf.Options.Add(Options.Vc.Linker.SubSystem.Application);

			conf.AddPublicDependency<TemplateClientProject>(target);

			conf.SolutionFolder = "Template";
		}

		public override void ConfigureAndroid(Configuration conf, Target target)
		{
			base.ConfigureAndroid(conf, target);

			conf.AdditionalLinkerOptions.Add("-lOpenSLES");
			conf.AdditionalLinkerOptions.Add("-lvulkan");
			conf.ExecuteTargetCopy = true;
		}
	}

	//-------------------------------------------------------------------------------------------------
	// Android project that will package up everything up, deploy to a device or emulator and allow debugging
	//-------------------------------------------------------------------------------------------------
	[Generate]
	class TemplateExePackage : BaseAndroidProject
	{
		public TemplateExePackage()
		{
			SharpmakeToGlobalRoot = SharpmakeToRoot = @"\..";

			Name = "Template";

			AppLibType = typeof(TemplateExeProjectAndroid);
		}

		public override void ConfigureAll(Configuration conf, Target target)
		{
			base.ConfigureAll(conf, target);
			conf.AddPrivateDependency<TemplateExeProjectAndroid>(target);
		}
	}

	[Generate]
	class TemplateSolution : BaseSolution
	{
		public TemplateSolution()
		{
			SharpmakeToGlobalRoot = SharpmakeToRoot = @"\..";
			Name = "Template";
		}

		public override void AddProjects(Configuration conf, Target target)
		{
			GameExampleSolution.AddUnitTestProjects(conf, target);

			if (target.Platform == Platform.android64)
			{
				GameExampleSolution.AddDefaultProject<TemplateExePackage>(conf, target);
			}
			else
			{
				GameExampleSolution.AddDefaultProject<TemplateExeProject>(conf, target);
			}
		}
	}

	//-------------------------------------------------------------------------------------------------
	// Sharpmake's equivalent of the Main function. Add any custom setup here and any additional solutions
	// you want generated.
	//-------------------------------------------------------------------------------------------------
	public static class Entry
    {
        [Sharpmake.Main]
        public static void SharpmakeMain(Arguments arguments)
        {
			var cmdLine = new Parameters();
			CommandLine.ExecuteOnObject(cmdLine);

            KitsRootPaths.SetKitsRoot10ToHighestInstalledVersion();

			// important this happens after command line processing
			Globals.SharpmakeToGlobalRoot += @"\..";
			arguments.Generate<TemplateSolution>();
       }
    }
}
